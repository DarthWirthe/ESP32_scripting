/* Пример 13
 * Игра-платформер на дисплее TFT
*/

int button_pin = 15 // Кнопка
int updateTime = 0, frameTime = 0, fctr = 0, fps = 0
global int counter1 = 0, highscore = 0, fspeed,
			start = false, passing = false, flag1 = true
string s1 = "fps: ", s2 = "Press button", s3 = "to start", s4 = "High score: "
global var white = tft.rgb(255, 255, 255),
			blue = tft.rgb(0, 0, 255),
			yellow = tft.rgb(255, 255, 0),
			lightgrey = tft.rgb(200, 200, 200),
			fcolor = tft.rgb(208, 48, 48)
global int cw = 10
global int bx, by1, by2, bw, bh1, bh2, fx
global float cx, cy, movey
float gravity = 0.05 // Коэффициент гравитации

function int min(int a, int b) {
	if (a < b) {
		return a
	}
	return b
}

// Функция инициализации
function init()
{
	cx = 25
	cy = tft.height() / 2
	movey = 0.0
	bx = -0xff
	by1 = 0
	by2 = 0
	bw = 15 // толщина стенок
	bh1 = 0
	bh2 = 0
	fx = 0 
	fspeed = 1 // скорость игры
}

// Функция отрисовки кадра
function draw()
{
	int tfth = tft.height(), tftw = tft.width()
	// Фон
	for int i = 0; i < tfth; i = i + 1
	{
		tft.draw_hline(0, i, tftw, tft.rgb(i / 2, 192 - i, 255 - i))
	}
	for int i = fx / 2 - 4; i < tftw + 10; i = i + 8
	{
		tft.draw_pixel(i, 10, lightgrey)
		tft.draw_pixel(i + 3, 16, white)
		tft.draw_pixel(i, 22, white)
		tft.draw_pixel(i + 3, 28, lightgrey)
	}
	// Летающая фигура
	tft.fill_circle(cx, cy, cw, fcolor)
	tft.fill_circle(cx - cw / 2, cy + cw / 2, cw / 2, fcolor)
	tft.fill_circle(cx + cw / 2, cy - cw / 2, cw / 4, white)
	// Стенки
	tft.fill_rect(bx, by1, bw, bh1, yellow)
	tft.draw_rect(bx, by1, bw, bh1, 0)
	tft.fill_rect(bx, by2, bw, bh2, yellow)
	tft.draw_rect(bx, by2, bw, bh2, 0)
}

function retry()
{
	start = false
	if (counter1 > highscore) {
		highscore = counter1
	}
}

gpio.set_mode_input(button_pin)
tft.init_buffered(0)
tft.set_text_color(white)
init()
var width = tft.width(), height = tft.height()

// Основной цикл
while (true)
{
	if (updateTime <= esp.timer())
	{
		updateTime = esp.timer() + 12000
		draw()
		
		if (start == false) {
			if (flag1 == true) {
				tft.draw_string(s3, 12, height - 20, 2)
				tft.draw_string(s2, 12, height - 35, 2)
			}
			if (highscore > 0) {
				tft.set_font(2)
				tft.set_cursor(12, height - 60)
				tft.write(s4)
				tft.write(highscore)
			}
		}
		tft.draw_string(counter1, width - 20, 4, 2)
		tft.set_font(1)
		tft.set_cursor(1, 1)
		tft.write(s1)
		tft.write(fps)
		tft.draw_buffer()
		fctr = fctr + 1
		
		if (gpio.read(button_pin)) {
			if (start == false) {
				init()
				counter1 = 0
				start = true
			}
			movey = -1.5
		}
		if (start) {
			bx = bx - fspeed
			fx = fx - 1
			if (bx + bw < 0)
			{
				bx = m.random(width, width + 100)
				int blockh = m.random(5, height - height / 4)
				// С вероятностью 25% нижняя стенка будет короткой
				if (m.random(1, 100) <= 25) {
					by2 = height - blockh * 2
				} else {
					by2 = height - blockh
				}
				bh1 = height / 2 - blockh
				bh2 = blockh
			}
			if (fx < 0) {
				fx = 16
			}
			cy = cy + movey
			movey = movey + gravity
			// Столкновение с границей экрана
			if (cy < cw or cy > height) {
				retry()
			}
			// Столкновение со стенкой
			int tcx = cx, tcy = cy
			if ((bx < tcx) and (bx + bw > tcx)) {
				if (((tcy + cw > by1) and (tcy < by1 + bh1 + cw)) or ((tcy + cw > by2) and (tcy < by2 + bh2 + cw))) {
					retry()
				}
				passing = true;
			} elseif passing == true {
				counter1 = counter1 + 1
				passing = false
				// Увеличение скорости каждые 35 препятствий
				if (counter1 % 35 == 0) {
					fspeed = fspeed + 1
				}
			}
		}
	}
	// Счетчик fps
	if (frameTime <= esp.timer())
	{
		frameTime = esp.timer() + 1000000
		fps = fctr
		fctr = 0
		if (flag1) {
			flag1 = false
		} else {
			flag1 = true
		}
	}
}

::end::
tft.delete_buffer()